// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonteCarlo.NET.Data;

#nullable disable

namespace MonteCarlo.NET.Migrations
{
    [DbContext(typeof(KasynoContext))]
    [Migration("20250121192632_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Ban", b =>
                {
                    b.Property<int>("IdBana")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBana"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dlugosc")
                        .HasColumnType("int");

                    b.Property<string>("KontoUzytkownikaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Przyczyna")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IdBana");

                    b.HasIndex("KontoUzytkownikaId");

                    b.ToTable("Ban");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Druzyna", b =>
                {
                    b.Property<int>("DruzynaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DruzynaId"));

                    b.Property<string>("League")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DruzynaId");

                    b.ToTable("Druzyna");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Gra", b =>
                {
                    b.Property<int>("IdGry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGry"));

                    b.Property<double>("MinStawka")
                        .HasColumnType("float");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdGry");

                    b.ToTable("Gra");

                    b.HasData(
                        new
                        {
                            IdGry = 1,
                            MinStawka = 1.0,
                            Nazwa = "Slotsy"
                        },
                        new
                        {
                            IdGry = 2,
                            MinStawka = 1.0,
                            Nazwa = "Zdrapka koniczynka"
                        },
                        new
                        {
                            IdGry = 3,
                            MinStawka = 1.0,
                            Nazwa = "Zdrapka Prosta"
                        },
                        new
                        {
                            IdGry = 4,
                            MinStawka = 1.0,
                            Nazwa = "Wyscigi Konne"
                        },
                        new
                        {
                            IdGry = 5,
                            MinStawka = 1.0,
                            Nazwa = "Obstawianie"
                        },
                        new
                        {
                            IdGry = 6,
                            MinStawka = 1.0,
                            Nazwa = "Ruletka"
                        },
                        new
                        {
                            IdGry = 7,
                            MinStawka = 1.0,
                            Nazwa = "Kosci"
                        });
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.GraKonto", b =>
                {
                    b.Property<int>("IdGraKonto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGraKonto"));

                    b.Property<DateTime>("Czas")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdGry")
                        .HasColumnType("int");

                    b.Property<double>("IlePostawiono")
                        .HasColumnType("float");

                    b.Property<double>("IleWygrano")
                        .HasColumnType("float");

                    b.Property<string>("KontoUzytkownikaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdGraKonto");

                    b.HasIndex("IdGry");

                    b.HasIndex("KontoUzytkownikaId");

                    b.ToTable("GraKonto");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.KontoUzytkownika", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double?>("Saldo")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("MinimumPlayedGames")
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Levele");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Limit", b =>
                {
                    b.Property<int>("IdLimitu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLimitu"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("KontoUzytkownikaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Kwota")
                        .HasColumnType("float");

                    b.HasKey("IdLimitu");

                    b.HasIndex("KontoUzytkownikaId");

                    b.ToTable("Limit");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Mecz", b =>
                {
                    b.Property<int>("MeczId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeczId"));

                    b.Property<int>("AwayTeamGoals")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("AwayTeamOdds")
                        .HasColumnType("real");

                    b.Property<int>("HomeTeamGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("HomeTeamOdds")
                        .HasColumnType("real");

                    b.Property<DateOnly>("data")
                        .HasColumnType("date");

                    b.HasKey("MeczId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Mecz");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Transakcja", b =>
                {
                    b.Property<int>("IdTransakcji")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransakcji"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("KontoUzytkownikaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Kwota")
                        .HasColumnType("float");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTransakcji");

                    b.HasIndex("KontoUzytkownikaId");

                    b.ToTable("Transakcja");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Zaklad", b =>
                {
                    b.Property<int>("IdZakladu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZakladu"));

                    b.Property<string>("IdGracza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdMeczu")
                        .HasColumnType("int");

                    b.Property<int>("IdZwyciezcy")
                        .HasColumnType("int");

                    b.Property<long>("PostawionaKwota")
                        .HasColumnType("bigint");

                    b.Property<bool>("czyPrzyznanoNagrode")
                        .HasColumnType("bit");

                    b.Property<bool>("czyWygral")
                        .HasColumnType("bit");

                    b.HasKey("IdZakladu");

                    b.ToTable("Zaklady");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Zgloszenie", b =>
                {
                    b.Property<int>("IdZgloszenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdZgloszenia"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("KontoUzytkownikaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notatki")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdZgloszenia");

                    b.HasIndex("KontoUzytkownikaId");

                    b.ToTable("Zgloszenie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Ban", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", "KontoUzytkownika")
                        .WithMany("Bany")
                        .HasForeignKey("KontoUzytkownikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KontoUzytkownika");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.GraKonto", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.Gra", "Gra")
                        .WithMany("GryKonta")
                        .HasForeignKey("IdGry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", "KontoUzytkownika")
                        .WithMany("GryKonta")
                        .HasForeignKey("KontoUzytkownikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gra");

                    b.Navigation("KontoUzytkownika");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Limit", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", "KontoUzytkownika")
                        .WithMany("Limity")
                        .HasForeignKey("KontoUzytkownikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KontoUzytkownika");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Mecz", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.Druzyna", "DruzynaAway")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonteCarlo.NET.Models.Druzyna", "DruzynaHome")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DruzynaAway");

                    b.Navigation("DruzynaHome");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Transakcja", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", "KontoUzytkownika")
                        .WithMany("Trasakcje")
                        .HasForeignKey("KontoUzytkownikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KontoUzytkownika");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Zgloszenie", b =>
                {
                    b.HasOne("MonteCarlo.NET.Models.KontoUzytkownika", "KontoUzytkownika")
                        .WithMany("Zgloszenia")
                        .HasForeignKey("KontoUzytkownikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KontoUzytkownika");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.Gra", b =>
                {
                    b.Navigation("GryKonta");
                });

            modelBuilder.Entity("MonteCarlo.NET.Models.KontoUzytkownika", b =>
                {
                    b.Navigation("Bany");

                    b.Navigation("GryKonta");

                    b.Navigation("Limity");

                    b.Navigation("Trasakcje");

                    b.Navigation("Zgloszenia");
                });
#pragma warning restore 612, 618
        }
    }
}
