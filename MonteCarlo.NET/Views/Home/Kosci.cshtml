<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kosci Game</title>
    <style>
        body {
            margin: 0px;
            padding: 0px;
            justify-content: center;
            height: 130vh;
        }

        #mainflex {
            display: flex;
            justify-content: center;
            align-items: flex-start;
            font-family: Arial, sans-serif;
        }

        .error-message {
            width: 200px;
            font-weight: bold;
        }

        .flexright {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }

        .table-container {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        table {
            border-collapse: collapse;
            margin: 0 20px 0 0;
        }

        th, td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: center;
        }

        th {
            background-color: #f0f0f0;
        }

        .row {
            display: flex;
            justify-content: center;
            margin: 10px 0;
        }

        .stuff {
            display: flex;
            gap: 10px;
        }

            .stuff div {
                width: 50px;
                height: 50px;
                display: flex;
                justify-content: center;
                align-items: center;
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                border-radius: 5px;
                font-size: 18px;
                font-weight: bold;
            }

        .roll-button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .roll-button:hover {
                background-color: #0056b3;
            }

        .score-button {
            padding: 5px 10px;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
        }

            .score-button:hover {
                background-color: #82f1f5;
            }

        .dicerownums img {
            width: 50px;
            height: 50px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div id="mainflex">
        <div class="container">
            <div class="table-container">
                <table>
                    <tbody id="scoreTableBody">
                        <!--dynamiczne, zobacz createScoreButtons()-->
                    </tbody>
                </table>
            </div>

            <div>
                <div class="row stuff">
                    <p id="counter"></p>
                </div>
                <div class="row stuff">
                    <div class="dicerownums" id="dice0"><img src="" alt="dice" id="diceImg0"></div>
                    <div class="dicerownums" id="dice1"><img src="" alt="dice" id="diceImg1"></div>
                    <div class="dicerownums" id="dice2"><img src="" alt="dice" id="diceImg2"></div>
                    <div class="dicerownums" id="dice3"><img src="" alt="dice" id="diceImg3"></div>
                    <div class="dicerownums" id="dice4"><img src="" alt="dice" id="diceImg4"></div>
                </div>
                <div class="row stuff">
                    <div><input type="checkbox" id="lock0" onchange="toggleLock(0)"></div>
                    <div><input type="checkbox" id="lock1" onchange="toggleLock(1)"></div>
                    <div><input type="checkbox" id="lock2" onchange="toggleLock(2)"></div>
                    <div><input type="checkbox" id="lock3" onchange="toggleLock(3)"></div>
                    <div><input type="checkbox" id="lock4" onchange="toggleLock(4)"></div>
                </div>
                <div class="row">
                    <button class="roll-button" id="rollButton" onclick="handleRoll()" disabled>Roll</button>
                </div>
            </div>

            <div class="flexright">
                <label for="betAmount">You must reach 130 points to win (triple your bet).<br />Bet Amount:</label>
                <input type="number" id="betAmount" placeholder="Enter amount" />
                <button class="roll-button" id="startButton" onclick="startGame()">Finalize Bet</button>
            </div>
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="error-message">
                    @TempData["ErrorMessage"]
                </div>
            }
        </div>
    </div>

    <script>
        var roundNum = 0;
        var rollNum = 0;
        var next = false;
        var input = null;
        var dice = [0, 0, 0, 0, 0];
        var locks = [false, false, false, false, false];
        var score = Array(13).fill(0);
        var scoreLocks = [false, false, false, false, false, false, false, false, false, false, false, false, false];
        var bet = 0;
        var scoreToBeat = 130;

        const scoreCategories = [
            "Jedynki", "Dwójki", "Trójki", "Czwórki", "Piątki", "Szóstki",
            "3 Jednakowe", "4 Jednakowe", "Full",
            "Mały Strit", "Duży Strit", "Generał", "Szansa"
        ];

        createScoreButtons();
        updateUI();

        async function startGame() {
            const startButton = document.getElementById('startButton');
            const rollbutton = document.getElementById('rollButton');

            const numberInput = document.getElementById('betAmount');
            bet = parseFloat(numberInput.value);

            if (await checkBet()) {
                startButton.disabled = true;
                numberInput.disabled = true;
                rollButton.disabled = false;
            } else {
                window.location.href = "/Home/Kosci";
            }
        }

        function updateUI() {
            for (let i = 0; i < 5; i++) {
                var diceValue = dice[i];

                const diceImg = document.getElementById(`diceImg${i}`);
                diceImg.src = `/images/dice${diceValue}.jpg`;
                diceImg.alt = `Dice value: ${diceValue}`;

                document.getElementById(`lock${i}`).checked = locks[i];
                document.getElementById(`counter`).textContent = "Rolls left: " + (3 - rollNum);
            }
        }

        function handleRoll() {
            roll();
            updateUI();
        }

        function roll() {
            if (rollNum < 3) {
                for (let i = 0; i < 5; i++) {
                    if (!locks[i]) {
                        dice[i] = Math.floor(Math.random() * 6) + 1;
                    }
                }
                rollNum++;
            }
        }

        function toggleLock(index) {
            locks[index] = !locks[index];
        }

        function kolejka(index) {
            if (index >= 0 && index < 13) {
                const success = setScore(index);
                if (success) {
                    rollNum = 0;
                    dice = [0, 0, 0, 0, 0];
                    locks.fill(false);
                    updateUI();
                }
            }
        }

        function setScore(index) {
            if (scoreLocks[index] == false) {
                scoreLocks[index] = true;
                score[index] = checkScore(index);
                document.getElementById(`scoreBtn${index}`).textContent = score[index];
                document.getElementById(`scoreBtn${index}`).style.backgroundColor = "#eb4034";
                roundNum++;

                if (roundNum >= 13) {
                    endGame();
                }
                return true;
            } else {
                return false;
            }
        }

        function endGame() {
            var scoreSum = score.reduce((a, b) => a + b, 0);
            var ileWygrane = 0;
            var isWinner = false;

            if (scoreSum > scoreToBeat) {
                ileWygrane = 3 * bet;
                isWinner = true;
            } else if (scoreSum == scoreToBeat) {
                ileWygrane = bet;
            }

            const data = {
                isWinner: isWinner,
                bet: bet,
                ileWygrane: ileWygrane
            };

            console.log('Sending POST request with data:', JSON.stringify(data));

            fetch('/RC/ZwrocWynikKosci', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                console.log('Response from server:', data);
            })
            .catch(error => {
                console.error('Error during POST request:', error);
            });

            setTimeout(() => {
                console.log("Przekierowanie po 3 sekundach...");
                window.location.href = "/Home/Kosci";
            }, 3000);
        }

        function checkScore(index) {
            let score = 0;
            const AM = Array(6).fill(0);

            if (index >= 0 && index <= 5) {
                for (let i = 0; i < 5; i++) {
                    if (dice[i] === index + 1) {
                        score += index + 1;
                    }
                }
            } else if (index === 6) {
                dice.forEach((die) => AM[die - 1]++);
                if (AM.includes(3) || AM.includes(4) || AM.includes(5)) {
                    score = dice.reduce((sum, val) => sum + val, 0);
                }
            } else if (index === 7) {
                dice.forEach((die) => AM[die - 1]++);
                if (AM.includes(4) || AM.includes(5)) {
                    score = dice.reduce((sum, val) => sum + val, 0);
                }
            } else if (index === 8) {
                dice.forEach((die) => AM[die - 1]++);
                if (AM.includes(3) && AM.includes(2)) {
                    score = 25;
                }
            } else if (index === 9) {
                if ([1, 2, 3, 4].every((val) => dice.includes(val)) || [2, 3, 4, 5].every((val) => dice.includes(val)) || [3, 4, 5, 6].every((val) => dice.includes(val))) {
                    score = 30;
                }
            } else if (index === 10) {
                if ([2, 3, 4, 5, 6].every((val) => dice.includes(val)) || [1, 2, 3, 4, 5].every((val) => dice.includes(val))) {
                    score = 40;
                }
            } else if (index === 11) {
                dice.forEach((die) => AM[die - 1]++);
                if (AM.includes(5)) {
                    score = 50;
                }
            } else if (index === 12) {
                score = dice.reduce((sum, val) => sum + val, 0);
            }

            return score;
        }

        function createScoreButtons() {
            const tbody = document.getElementById("scoreTableBody");
            scoreCategories.forEach((category, index) => {
                const row = document.createElement("tr");
                const labelCell = document.createElement("td");
                labelCell.textContent = category;

                const actionCell = document.createElement("td");
                const button = document.createElement("button");
                button.className = "score-button";
                button.textContent = score[index];
                button.id = `scoreBtn${index}`;
                button.onclick = () => kolejka(index);
                button.style.width = "100px";
                button.style.height = "30px";
                button.style.backgroundColor = "#28a745";

                actionCell.appendChild(button);
                row.appendChild(labelCell);
                row.appendChild(actionCell);
                tbody.appendChild(row);
            });
        }

        async function checkBet() {
            try {
                const response = await fetch('/RC/CheckBet', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ betData: bet }),
                });
                const result = await response.json();
                return result;
            } catch (error) {
                console.error("Error during fetch:", error);
            }
        }
    </script>
</body>
</html>
